# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2021-04-13T20:05:06+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, conint, constr, validator, ValidationError


class Citizenship(Enum):
    PL = 'PL'
    DE = 'DE'
    UK = 'UK'


class Stub(BaseModel):
    user: str


class User(BaseModel):
    id: Optional[UUID] = None
    name: str = Field(..., example='Elon')
    surname: str = Field(..., example='Musk')
    age: conint(ge=1, le=100) = Field(..., example=10)
    personalId: constr(regex=r'^[0-9]{11}$') = Field(..., example='92011165987')
    citizenship: Citizenship = Field(..., example='PL')
    email: Optional[constr(regex=r'^[-\w\.]+@([-\w]+\.)+[-\w]{2,4}$')] = Field(
        None, example='e_musk@gmail.com'
    )
    @validator('name')
    def name_cannot_contain_numbers(cls, v):
        if any(True for e in '1234567890' if e in v):
            raise ValueError('name cannot contain numbers')
        return v
    #
    @validator('age')
    def age_must_be_within_range(cls, v):
        if int(v) < 1 or int(v) > 100:
            raise ValueError('invalid age')
        return v
    #
#



class RequestHeader(BaseModel):
    requestId: UUID
    sendDate: datetime = Field(
        ...,
        description="Date format according to ISO_8601 for example: yyyy-MM-dd'T'HH:mm:ss.SSSZ",
    )


class ResponseHeader(BaseModel):
    requestId: UUID
    sendDate: datetime = Field(
        ...,
        description="Date format according to ISO_8601 for example: yyyy-MM-dd'T'HH:mm:ss.SSSZ",
    )


class CreateRequest(BaseModel):
    requestHeader: RequestHeader
    user: User


class UpdateRequest(BaseModel):
    requestHeader: RequestHeader
    user: User


class UserResponse(BaseModel):
    responseHeader: RequestHeader
    user: User


class UserListResponse(BaseModel):
    responseHeader: RequestHeader
    usersList: List[User]


class Error(BaseModel):
    responseHeader: ResponseHeader
    code: str = Field(..., example='NOT_FOUND')
    message: Optional[str] = Field(None, example="Resource doesn't exist")
