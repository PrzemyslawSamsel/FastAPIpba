# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2021-04-13T20:05:06+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, conint, constr, validator, ValidationError
from fastapi import status, HTTPException


class Citizenship(Enum):
    PL = 'PL'
    DE = 'DE'
    UK = 'UK'


class Stub(BaseModel):
    user: str


class User(BaseModel):
    id: Optional[UUID] = None
    name: str = Field(..., example='Elon')
    surname: str = Field(..., example='Musk')
    age: conint(ge=1, le=100) = Field(..., example=10)
    personalId: constr(regex=r'^[0-9]{11}$') = Field(..., example='92011165987')
    citizenship: Citizenship = Field(..., example='PL')
    email: Optional[constr(regex=r'^[-\w\.]+@([-\w]+\.)+[-\w]{2,4}$')] = Field(
        None, example='e_musk@gmail.com'
    )
    @validator('name')
    def name_cannot_contain_numbers(cls, v):
        if any(True for e in '1234567890' if e in v):
            raise ValueError('name cannot contain numbers')
        return v
    #
    @validator('age')
    def age_must_be_within_range(cls, v):
        if int(v) < 1 or int(v) > 100:
            raise ValueError('invalid age')
        return v
    #
#



class RequestHeader(BaseModel):
    requestId: UUID
    sendDate: datetime = Field(
        ...,
        description="Date format according to ISO_8601 for example: yyyy-MM-dd'T'HH:mm:ss.SSSZ",
    )


class ResponseHeader(BaseModel):
    requestId: UUID
    sendDate: datetime = Field(
        ...,
        description="Date format according to ISO_8601 for example: yyyy-MM-dd'T'HH:mm:ss.SSSZ",
    )


class CreateRequest(BaseModel):
    requestHeader: RequestHeader
    user: User


class UpdateRequest(BaseModel):
    requestHeader: RequestHeader
    user: User


class UserResponse(BaseModel):
    responseHeader: RequestHeader
    user: User


class UserListResponse(BaseModel):
    responseHeader: RequestHeader
    usersList: List[User]


class Error(HTTPException):
    def __init__(self, responseHeader, code, message, status_code):
        #super(HTTPException, self).__init__(status_code)
        self.status_code = status_code
        self.detail = ''
        self.responseHeader = responseHeader
        self.code = code
        self.message = message
    def __str__(self):
        return "{'123' : '123'}"

    #responseHeader: ResponseHeader
    #code: str = Field(..., example='NOT_FOUND')
    #message: Optional[str] = Field(None, example="Resource doesn't exist")

"""
    Models for OAuth
"""
# Internal - token generated by this app
# External - token requested from an external server
INTERNAL = 0x01
EXTERNAL = 0x02
TOKEN_GENERATION = EXTERNAL

# to get a string like this run:
# openssl rand -hex 32
SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
ALGORITHM = "RS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 2

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None

"""
    Exceptions
"""

class UnicornException(Exception):
    def __init__(self, message: str, sendDate: str, requestId : str, status_code : int, code : str):
        self.code = code
        self.message = message
        self.requestId = requestId
        self.sendDate = sendDate
        self.status_code = status_code

CredentialsException = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
CredentialsExceptionBasic = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Basic"},
    )
ScopeException = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Scope of token is not valid",
        headers={"WWW-Authenticate": "Bearer"},
    )
ExpiryException = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Token has already expired",
        headers={"WWW-Authenticate": "Bearer"},
    )
